const { Prisma } = require('@prisma/client');
const ApiError = require('../utils/ApiError');

const errorHandler = (err, req, res, next) => {
    if (process.env.NODE_ENV !== 'production') {
        console.error('üí• AN ERROR OCCURRED üí•:', err);
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ default
    let statusCode = err.statusCode || 500;
    let message = err.message || 'Internal Server Error';

    //Prisma Validation Error (‡πÄ‡∏ä‡πà‡∏ô missing argument, type mismatch)
    if (err instanceof Prisma.PrismaClientValidationError) {
        statusCode = 400;
        message = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }
    //Prisma Known Request Error (P2002, P2025 ‡∏Ø‡∏•‡∏Ø)
    else if (err instanceof Prisma.PrismaClientKnownRequestError) {
        switch (err.code) {
            case 'P2002':
                statusCode = 409;
                message = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "${err.meta.target[0]}" ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`;
                break;
            case 'P2025':
                statusCode = 404;
                message = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
                break;
            default:
                statusCode = 500;
                message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        }
    }
    //Zod Validation Error
    else if (err.name === 'ZodError') {
        statusCode = 400;
        message = err.errors.map(e => e.message).join(', ');
    }
    //ApiError ‡∏ó‡∏µ‡πà‡πÇ‡∏¢‡∏ô‡πÄ‡∏≠‡∏á
    else if (err instanceof ApiError) {
        statusCode = err.statusCode;
        message = err.message;
    }

    //‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error 500 ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏™‡∏°‡∏≠
    if (statusCode >= 500) {
        message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
    }

    res.status(statusCode).json({
        success: false,
        message,
        data: null,
    });
};

module.exports = { errorHandler };
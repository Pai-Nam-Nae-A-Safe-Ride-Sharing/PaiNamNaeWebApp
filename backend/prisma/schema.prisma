datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PASSENGER
  DRIVER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RouteStatus {
  AVAILABLE
  FULL
  COMPLETED
  CANCELLED
  IN_TRANSIT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum CancelReason {
  CHANGE_OF_PLAN               // เปลี่ยนแผน/มีธุระกะทันหัน
  FOUND_ALTERNATIVE            // พบวิธีเดินทางอื่นแล้ว
  DRIVER_DELAY                 // คนขับล่าช้าหรือเลื่อนเวลา
  PRICE_ISSUE                  // ราคาหรือค่าใช้จ่ายไม่เหมาะสม
  WRONG_LOCATION               // เลือกจุดรับ–ส่งผิด
  DUPLICATE_OR_WRONG_DATE      // จองซ้ำหรือจองผิดวัน
  SAFETY_CONCERN               // กังวลด้านความปลอดภัย
  WEATHER_OR_FORCE_MAJEURE     // สภาพอากาศ/เหตุสุดวิสัย
  COMMUNICATION_ISSUE          // สื่อสารไม่สะดวก/ติดต่อไม่ได้
}

enum LicenseType {
  PRIVATE_CAR_TEMPORARY // รถยนต์ส่วนบุคคลชั่วคราว (2 ปี)
  PRIVATE_CAR          // รถยนต์ส่วนบุคคล (5 ปี)
  PUBLIC_CAR           // รถยนต์สาธารณะ
  LIFETIME             // ตลอดชีพ
}

enum NotificationType {
  SYSTEM
  VERIFICATION
  BOOKING
  ROUTE
}

enum PenaltyEventType {
  DRIVER_CONFIRMED_CANCEL   
  PASSENGER_CONFIRMED_CANCEL
}

model User {
  id                    String   @id @default(cuid())
  username              String   @unique
  email                 String   @unique
  password              String
  firstName             String?
  lastName              String?
  gender                String?
  phoneNumber           String?
  profilePicture        String?
  nationalIdNumber      String?  @unique
  nationalIdPhotoUrl    String?  @unique
  nationalIdExpiryDate  DateTime?
  selfiePhotoUrl        String?
  role                  Role     @default(PASSENGER)
  isVerified            Boolean  @default(false)
  isActive              Boolean  @default(true)
  otpCode               String?
  lastLogin             DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  passengerSuspendedUntil DateTime?
  driverSuspendedUntil    DateTime?
  driverPenaltyResetAt    DateTime?
  passengerPenaltyResetAt  DateTime?
  
  driverVerification    DriverVerification?
  vehicles              Vehicle[]
  notification          Notification[]
  createdRoutes         Route[]             @relation("DriverRoutes")
  bookings              Booking[]           @relation("PassengerBookings")
  penaltyEvents           PenaltyEvent[]      @relation("UserPenaltyEvents")
  @@index([role])
  @@index([isActive])
  @@index([isVerified])
  @@index([createdAt])
}

model DriverVerification {
  id                  String             @id @default(cuid())
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber       String             @unique
  firstNameOnLicense  String
  lastNameOnLicense   String
  licenseIssueDate    DateTime
  licenseExpiryDate   DateTime
  licensePhotoUrl     String
  selfiePhotoUrl      String
  typeOnLicense       LicenseType
  status              VerificationStatus @default(PENDING)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([licenseIssueDate])
  @@index([licenseExpiryDate])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  type      NotificationType @default(SYSTEM)
  title     String
  body      String
  link      String?
  metadata  Json?            @db.Json

  readAt    DateTime?
  createdAt DateTime         @default(now())
  adminReviewedAt DateTime?

  @@index([userId, createdAt])
  @@index([userId, readAt])
  @@index([adminReviewedAt])
}

model Vehicle {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleModel  String
  licensePlate  String   @unique
  vehicleType   String
  color         String
  seatCapacity  Int
  amenities     String[]
  photos        Json?    @db.Json
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  routes        Route[]

  @@index([userId])
  @@index([createdAt])
  @@index([vehicleType])
  @@index([seatCapacity])
}

model Route {
  id              String      @id @default(cuid())
  driverId        String
  driver          User        @relation("DriverRoutes", fields: [driverId], references: [id], onDelete: Cascade)
  vehicleId       String
  vehicle         Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  startLocation   Json        @db.Json
  endLocation     Json        @db.Json
  departureTime   DateTime
  availableSeats  Int
  pricePerSeat    Float
  conditions      String?
  status          RouteStatus @default(AVAILABLE)
  cancelledAt     DateTime?
  cancelledBy     String?     // 'DRIVER' | 'ADMIN'
  routePolyline String?
  distanceMeters Int?
  durationSeconds Int?
  routeSummary    String?
  distance        String?
  duration        String?
  waypoints       Json?        @db.Json
  landmarks       Json?       @db.Json
  steps           Json?       @db.Json
  createdAt       DateTime    @default(now())
  updatedAt     DateTime @updatedAt

  bookings        Booking[]
  penaltyEvents   PenaltyEvent[] @relation("RoutePenaltyEvents")
  @@index([driverId])
  @@index([vehicleId])
  @@index([status])
  @@index([createdAt])
  @@index([departureTime])
}

model Booking {
  id              String        @id @default(cuid())
  routeId         String
  route           Route         @relation(fields: [routeId], references: [id], onDelete: Cascade)
  penaltyEvents   PenaltyEvent[] @relation("BookingPenaltyEvents")
  passengerId     String
  passenger       User          @relation("PassengerBookings", fields: [passengerId], references: [id], onDelete: Cascade)
  numberOfSeats   Int
  status          BookingStatus @default(PENDING)
  cancelledAt     DateTime?
  cancelledBy     String?       // 'PASSENGER' | 'DRIVER' | 'ADMIN'
  cancelReason    CancelReason?
  pickupLocation  Json          @db.Json
  dropoffLocation Json          @db.Json
  createdAt       DateTime      @default(now())
}

model PenaltyEvent {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation("UserPenaltyEvents", fields: [userId], references: [id], onDelete: Cascade)
  type      PenaltyEventType
  routeId   String?
  route      Route?            @relation("RoutePenaltyEvents", fields: [routeId], references: [id], onDelete: SetNull)
  bookingId String?
  booking    Booking?          @relation("BookingPenaltyEvents", fields: [bookingId], references: [id], onDelete: SetNull)
  createdAt DateTime          @default(now())
  @@index([userId, type, createdAt])
  @@unique([userId, type, routeId])    // กันเหตุซ้ำฝั่งไดรเวอร์
  @@unique([userId, type, bookingId])  // กันเหตุซ้ำฝั่งผู้โดยสาร
}